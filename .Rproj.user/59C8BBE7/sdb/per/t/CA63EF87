{
    "collab_server" : "",
    "contents" : "BaggingVal <- function(model_list, x_val, y_val, iteration = 1000){\n  #How many samples are used in the validation dataset\n  val_size = nrow(x_val)\n\n  #Number of candidate models\n  model_num = length(model_list)\n\n  #A list to store the prediction result for each model on the validation set\n  val_result = list()\n\n  #To store the result of the prediciton on the validation set temporarily\n  temp = NULL\n\n  #The performance of each model on the validation set\n  for(i in 1 : model_num){\n    temp = (model_list[[i]] %>% predict(x_val))\n\n    #Deal with the binary classification problem seperately\n    if(ncol(temp) == 1){\n      temp = cbind(1 - temp, temp)\n    }\n\n    #Store the validation result in the val_result list\n    val_result[[i]] = apply(temp, 1, which.max) - 1\n    #print(i)\n  }\n\n  #Store the result for every bootstrap sample\n  res = NULL\n  for(i in 1 : iteration){\n    #The index of data being bootstrapped\n    index = sample(val_size, val_size, replace = TRUE, prob = NULL)\n\n    #To store the validation result on the bootstrapped dataset\n    eva_result = NULL\n    for(j in 1 : model_num){\n      eva_result[j] = sum(val_result[[j]][index] == y_val[index])\n    }\n    res[i] = which.max(eva_result)\n  }\n  return(res)\n}\n\nBaggingTest <- function(res, model_list, x_test, y_test, start_pos = 1, end_pos = 1000){\n  #The matrix format to store all the test result for the candidate models\n  result = NULL\n\n  #Store the test result on all the candidate models\n  result_test = NULL\n\n  #Number of candidate models\n  model_num = length(model_list)\n\n  #To store the validation result temporarily\n  temp = NULL\n\n  #The number of samples in the test set\n  test_size = nrow(x_test)\n\n  for(i in 1 : model_num){\n    #The ith model's performance on the test dataset\n    temp = model_list[[i]] %>% predict(x_test)\n\n    #Deal with the binary classification problem seperately\n    if(ncol(temp) == 1){\n      temp = cbind(1 - temp, temp)\n      #print(\"111\")\n    }\n\n\n    result_test[[i]] = apply(temp, 1, which.max) - 1\n  }\n\n  #print(\"Individual model's performance is evaluated\")\n  #Compute the predict result for the all the model obtained from the bootstrap samples\n  for(i in 1 : iteration){\n    result = cbind(result, result_test[[res[i]]])\n    #print(i)\n  }\n\n  #Store the prediction result for each test sample on all the models\n  result_freq = NULL\n\n  #Store the accuracy for each iteration of sample\n  bagging_store = NULL\n\n  #Count how many bagging have been done\n  count = 1\n\n  #Initialize the list to store the cumulative result\n  list_table_temp = list()\n  for(i in 1 : test_size){\n    list_table_temp[[i]] = table(c(0 : (max(y_test)) ))\n  }\n\n  #The loop to study the performance of bagging models with respect to different numbers of Bootstrap samples\n  for(k in start_pos : end_pos){\n\n    #Update the table of the models chosen\n    for(i in 1 : test_size){\n      list_table_temp[[i]][result[i, k] + 1] = list_table_temp[[i]][result[i, k] + 1] + 1\n      result_freq[i] = names(list_table_temp[[i]])[which.max(list_table_temp[[i]])]\n      #print(i)\n    }\n\n    #The result of the ensemble when count number of individual models are trained\n    bagging_store[count] = sum((as.numeric(result_freq)) == y_test) / nrow(x_test)\n\n    #Update the number of candidate models used\n    count = count + 1\n    #print(k)\n  }\n  return(bagging_store)\n}\n\n\nPerformanceEvaluate <- function(model_list, x_test, y_test, start_pos, end_pos){\n  #Number of the candidate models\n  model_num = length(model_list)\n\n  #List to store the individual performance of each individual model\n  result_comp = NULL\n\n  #The number of model being tested\n  count = 1\n  for(r in start_pos : end_pos){\n    result_comp[count] = (model_list[[r]] %>% evaluate(x_test, y_test, verbose = 0))$acc\n    count = count + 1\n    #print(r)\n  }\n  return(result_comp)\n}\n",
    "created" : 1534794886013.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1945476579",
    "id" : "CA63EF87",
    "lastKnownWriteTime" : 1532524212,
    "last_content_update" : 1532524212,
    "path" : "~/Desktop/BoVS/BoVS/R/BoVS.R",
    "project_path" : "R/BoVS.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}